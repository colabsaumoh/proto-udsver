// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/server/ca (interfaces: ControlPlaneCa)

// Package ca is a generated GoMock package.
package ca

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/pkg/common/plugin"
)

// MockControlPlaneCa is a mock of ControlPlaneCa interface
type MockControlPlaneCa struct {
	ctrl     *gomock.Controller
	recorder *MockControlPlaneCaMockRecorder
}

// MockControlPlaneCaMockRecorder is the mock recorder for MockControlPlaneCa
type MockControlPlaneCaMockRecorder struct {
	mock *MockControlPlaneCa
}

// NewMockControlPlaneCa creates a new mock instance
func NewMockControlPlaneCa(ctrl *gomock.Controller) *MockControlPlaneCa {
	mock := &MockControlPlaneCa{ctrl: ctrl}
	mock.recorder = &MockControlPlaneCaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControlPlaneCa) EXPECT() *MockControlPlaneCaMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockControlPlaneCa) Configure(arg0 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockControlPlaneCaMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockControlPlaneCa)(nil).Configure), arg0)
}

// FetchCertificate mocks base method
func (m *MockControlPlaneCa) FetchCertificate(arg0 *FetchCertificateRequest) (*FetchCertificateResponse, error) {
	ret := m.ctrl.Call(m, "FetchCertificate", arg0)
	ret0, _ := ret[0].(*FetchCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCertificate indicates an expected call of FetchCertificate
func (mr *MockControlPlaneCaMockRecorder) FetchCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCertificate", reflect.TypeOf((*MockControlPlaneCa)(nil).FetchCertificate), arg0)
}

// GenerateCsr mocks base method
func (m *MockControlPlaneCa) GenerateCsr(arg0 *GenerateCsrRequest) (*GenerateCsrResponse, error) {
	ret := m.ctrl.Call(m, "GenerateCsr", arg0)
	ret0, _ := ret[0].(*GenerateCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCsr indicates an expected call of GenerateCsr
func (mr *MockControlPlaneCaMockRecorder) GenerateCsr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCsr", reflect.TypeOf((*MockControlPlaneCa)(nil).GenerateCsr), arg0)
}

// GetPluginInfo mocks base method
func (m *MockControlPlaneCa) GetPluginInfo(arg0 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockControlPlaneCaMockRecorder) GetPluginInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockControlPlaneCa)(nil).GetPluginInfo), arg0)
}

// LoadCertificate mocks base method
func (m *MockControlPlaneCa) LoadCertificate(arg0 *LoadCertificateRequest) (*LoadCertificateResponse, error) {
	ret := m.ctrl.Call(m, "LoadCertificate", arg0)
	ret0, _ := ret[0].(*LoadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCertificate indicates an expected call of LoadCertificate
func (mr *MockControlPlaneCaMockRecorder) LoadCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCertificate", reflect.TypeOf((*MockControlPlaneCa)(nil).LoadCertificate), arg0)
}

// SignCsr mocks base method
func (m *MockControlPlaneCa) SignCsr(arg0 *SignCsrRequest) (*SignCsrResponse, error) {
	ret := m.ctrl.Call(m, "SignCsr", arg0)
	ret0, _ := ret[0].(*SignCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignCsr indicates an expected call of SignCsr
func (mr *MockControlPlaneCaMockRecorder) SignCsr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCsr", reflect.TypeOf((*MockControlPlaneCa)(nil).SignCsr), arg0)
}
