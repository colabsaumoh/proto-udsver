// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/server/datastore (interfaces: DataStore)

// Package datastore is a generated GoMock package.
package datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/pkg/common/plugin"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockDataStore) Configure(arg0 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockDataStoreMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDataStore)(nil).Configure), arg0)
}

// CreateAttestedNodeEntry mocks base method
func (m *MockDataStore) CreateAttestedNodeEntry(arg0 *CreateAttestedNodeEntryRequest) (*CreateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateAttestedNodeEntry", arg0)
	ret0, _ := ret[0].(*CreateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttestedNodeEntry indicates an expected call of CreateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) CreateAttestedNodeEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).CreateAttestedNodeEntry), arg0)
}

// CreateFederatedEntry mocks base method
func (m *MockDataStore) CreateFederatedEntry(arg0 *CreateFederatedEntryRequest) (*CreateFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateFederatedEntry", arg0)
	ret0, _ := ret[0].(*CreateFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFederatedEntry indicates an expected call of CreateFederatedEntry
func (mr *MockDataStoreMockRecorder) CreateFederatedEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).CreateFederatedEntry), arg0)
}

// CreateNodeResolverMapEntry mocks base method
func (m *MockDataStore) CreateNodeResolverMapEntry(arg0 *CreateNodeResolverMapEntryRequest) (*CreateNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateNodeResolverMapEntry", arg0)
	ret0, _ := ret[0].(*CreateNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeResolverMapEntry indicates an expected call of CreateNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) CreateNodeResolverMapEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).CreateNodeResolverMapEntry), arg0)
}

// CreateRegistrationEntry mocks base method
func (m *MockDataStore) CreateRegistrationEntry(arg0 *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateRegistrationEntry", arg0)
	ret0, _ := ret[0].(*CreateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationEntry indicates an expected call of CreateRegistrationEntry
func (mr *MockDataStoreMockRecorder) CreateRegistrationEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).CreateRegistrationEntry), arg0)
}

// DeleteAttestedNodeEntry mocks base method
func (m *MockDataStore) DeleteAttestedNodeEntry(arg0 *DeleteAttestedNodeEntryRequest) (*DeleteAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteAttestedNodeEntry", arg0)
	ret0, _ := ret[0].(*DeleteAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttestedNodeEntry indicates an expected call of DeleteAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) DeleteAttestedNodeEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteAttestedNodeEntry), arg0)
}

// DeleteFederatedEntry mocks base method
func (m *MockDataStore) DeleteFederatedEntry(arg0 *DeleteFederatedEntryRequest) (*DeleteFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteFederatedEntry", arg0)
	ret0, _ := ret[0].(*DeleteFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFederatedEntry indicates an expected call of DeleteFederatedEntry
func (mr *MockDataStoreMockRecorder) DeleteFederatedEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteFederatedEntry), arg0)
}

// DeleteNodeResolverMapEntry mocks base method
func (m *MockDataStore) DeleteNodeResolverMapEntry(arg0 *DeleteNodeResolverMapEntryRequest) (*DeleteNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteNodeResolverMapEntry", arg0)
	ret0, _ := ret[0].(*DeleteNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeResolverMapEntry indicates an expected call of DeleteNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) DeleteNodeResolverMapEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteNodeResolverMapEntry), arg0)
}

// DeleteRegistrationEntry mocks base method
func (m *MockDataStore) DeleteRegistrationEntry(arg0 *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistrationEntry", arg0)
	ret0, _ := ret[0].(*DeleteRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationEntry indicates an expected call of DeleteRegistrationEntry
func (mr *MockDataStoreMockRecorder) DeleteRegistrationEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteRegistrationEntry), arg0)
}

// FetchAttestedNodeEntry mocks base method
func (m *MockDataStore) FetchAttestedNodeEntry(arg0 *FetchAttestedNodeEntryRequest) (*FetchAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchAttestedNodeEntry", arg0)
	ret0, _ := ret[0].(*FetchAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttestedNodeEntry indicates an expected call of FetchAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) FetchAttestedNodeEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).FetchAttestedNodeEntry), arg0)
}

// FetchNodeResolverMapEntry mocks base method
func (m *MockDataStore) FetchNodeResolverMapEntry(arg0 *FetchNodeResolverMapEntryRequest) (*FetchNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchNodeResolverMapEntry", arg0)
	ret0, _ := ret[0].(*FetchNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNodeResolverMapEntry indicates an expected call of FetchNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) FetchNodeResolverMapEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).FetchNodeResolverMapEntry), arg0)
}

// FetchRegistrationEntry mocks base method
func (m *MockDataStore) FetchRegistrationEntry(arg0 *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchRegistrationEntry", arg0)
	ret0, _ := ret[0].(*FetchRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRegistrationEntry indicates an expected call of FetchRegistrationEntry
func (mr *MockDataStoreMockRecorder) FetchRegistrationEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).FetchRegistrationEntry), arg0)
}

// FetchStaleNodeEntries mocks base method
func (m *MockDataStore) FetchStaleNodeEntries(arg0 *FetchStaleNodeEntriesRequest) (*FetchStaleNodeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "FetchStaleNodeEntries", arg0)
	ret0, _ := ret[0].(*FetchStaleNodeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStaleNodeEntries indicates an expected call of FetchStaleNodeEntries
func (mr *MockDataStoreMockRecorder) FetchStaleNodeEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStaleNodeEntries", reflect.TypeOf((*MockDataStore)(nil).FetchStaleNodeEntries), arg0)
}

// GetPluginInfo mocks base method
func (m *MockDataStore) GetPluginInfo(arg0 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockDataStoreMockRecorder) GetPluginInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockDataStore)(nil).GetPluginInfo), arg0)
}

// ListFederatedEntry mocks base method
func (m *MockDataStore) ListFederatedEntry(arg0 *ListFederatedEntryRequest) (*ListFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "ListFederatedEntry", arg0)
	ret0, _ := ret[0].(*ListFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFederatedEntry indicates an expected call of ListFederatedEntry
func (mr *MockDataStoreMockRecorder) ListFederatedEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).ListFederatedEntry), arg0)
}

// ListParentIDEntries mocks base method
func (m *MockDataStore) ListParentIDEntries(arg0 *ListParentIDEntriesRequest) (*ListParentIDEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListParentIDEntries", arg0)
	ret0, _ := ret[0].(*ListParentIDEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParentIDEntries indicates an expected call of ListParentIDEntries
func (mr *MockDataStoreMockRecorder) ListParentIDEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParentIDEntries", reflect.TypeOf((*MockDataStore)(nil).ListParentIDEntries), arg0)
}

// ListSelectorEntries mocks base method
func (m *MockDataStore) ListSelectorEntries(arg0 *ListSelectorEntriesRequest) (*ListSelectorEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListSelectorEntries", arg0)
	ret0, _ := ret[0].(*ListSelectorEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectorEntries indicates an expected call of ListSelectorEntries
func (mr *MockDataStoreMockRecorder) ListSelectorEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectorEntries", reflect.TypeOf((*MockDataStore)(nil).ListSelectorEntries), arg0)
}

// ListSpiffeEntries mocks base method
func (m *MockDataStore) ListSpiffeEntries(arg0 *ListSpiffeEntriesRequest) (*ListSpiffeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListSpiffeEntries", arg0)
	ret0, _ := ret[0].(*ListSpiffeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpiffeEntries indicates an expected call of ListSpiffeEntries
func (mr *MockDataStoreMockRecorder) ListSpiffeEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpiffeEntries", reflect.TypeOf((*MockDataStore)(nil).ListSpiffeEntries), arg0)
}

// RectifyNodeResolverMapEntries mocks base method
func (m *MockDataStore) RectifyNodeResolverMapEntries(arg0 *RectifyNodeResolverMapEntriesRequest) (*RectifyNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "RectifyNodeResolverMapEntries", arg0)
	ret0, _ := ret[0].(*RectifyNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyNodeResolverMapEntries indicates an expected call of RectifyNodeResolverMapEntries
func (mr *MockDataStoreMockRecorder) RectifyNodeResolverMapEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyNodeResolverMapEntries", reflect.TypeOf((*MockDataStore)(nil).RectifyNodeResolverMapEntries), arg0)
}

// UpdateAttestedNodeEntry mocks base method
func (m *MockDataStore) UpdateAttestedNodeEntry(arg0 *UpdateAttestedNodeEntryRequest) (*UpdateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAttestedNodeEntry", arg0)
	ret0, _ := ret[0].(*UpdateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttestedNodeEntry indicates an expected call of UpdateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) UpdateAttestedNodeEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateAttestedNodeEntry), arg0)
}

// UpdateFederatedEntry mocks base method
func (m *MockDataStore) UpdateFederatedEntry(arg0 *UpdateFederatedEntryRequest) (*UpdateFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateFederatedEntry", arg0)
	ret0, _ := ret[0].(*UpdateFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFederatedEntry indicates an expected call of UpdateFederatedEntry
func (mr *MockDataStoreMockRecorder) UpdateFederatedEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateFederatedEntry), arg0)
}

// UpdateRegistrationEntry mocks base method
func (m *MockDataStore) UpdateRegistrationEntry(arg0 *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateRegistrationEntry", arg0)
	ret0, _ := ret[0].(*UpdateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationEntry indicates an expected call of UpdateRegistrationEntry
func (mr *MockDataStoreMockRecorder) UpdateRegistrationEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateRegistrationEntry), arg0)
}
